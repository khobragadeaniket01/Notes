trigger:
- none

pool:
  vmImage: windows-2022
  demands:
    - msbuild
    - visualstudio
    - vstest

variables:
  - group: AppSettingsChanges-One
  - group: PublishPaths
  - name: BuildPlatform
    value: 'Any CPU'
  - name: BuildConfiguration
    value: 'Release'

stages:
 - stage: BuildAndRestore
   displayName: Build and Restore
   jobs:
     - job: ProjectSetupAndLibraries
       displayName: Building CI Pipeline...
       steps:
        - task: NodeTool@0
          displayName: 'Use Node 16.19.0'
          inputs:
            versionSource: 'spec'
            versionSpec: '16.19.0'

        - task: Cache@2
          displayName: 'Cache Node.js tools and dependencies'
          inputs:
            key: 'yarn | windows-2022 | package-json'
            restoreKeys: |
              yarn | windows-2022
            path: $(System.DefaultWorkingDirectory)/Source/Portals/Libraries/UI/user-context-lib/node_modules
            cacheHitVar: 'YARN_CACHE_RESTORED'

        - task: CmdLine@2
          displayName: 'Rebuild Libraries'
          inputs:
            script: |
              cd Source/Portals
              echo Rebuilding fetch-api-mixin-lib
              
              cd Libraries/UI/fetch-api-mixin-lib
              CALL yarn install 
              CALL yarn build-lib 
              
              echo Rebuilding user-context-lib
              cd ../user-context-lib
              CALL yarn install 
              CALL yarn build-lib

        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet Tool'
          inputs:
            versionSpec: '6.0'

        - task: CopyFiles@2
          displayName: 'Copy NuGet Packages'
          inputs:
            SourceFolder: 'Source/NugetPackages'
            Contents: '**'
            TargetFolder: '$(System.DefaultWorkingDirectory)/Source/NugetPackage'

        - task: CmdLine@2
          displayName: 'Remove Unused Directories'
          inputs:
            script: |
              echo Removing unused Directory
              rmdir /s /q "$(System.DefaultWorkingDirectory)/Source/Portals/ATT.ExternalInterface.RestAPI"
              rmdir /s /q "$(System.DefaultWorkingDirectory)/Source/Portals/TestSite"

        - task: PowerShell@2
          displayName: 'Exclude Specific Projects from Solution'
          inputs:
            targetType: 'inline'
            script: |
              $solutionFilePath = "$(System.DefaultWorkingDirectory)/Source/Portals/ApplicationGateway/ATT.Application.Gateway.sln"
              $projectsToExclude = @(
                  "ATT.Customer.Request.Terminal",
                  "ATT.Configuration",
                  "ATT.Kiosk",
                  "ATT.QueueMedia"
              )
              $solutionContent = Get-Content -Path $solutionFilePath
              $filteredContent = $solutionContent -notmatch ($projectsToExclude -join "|")
              $filteredContent | Set-Content -Path $solutionFilePath
              Write-Output "Excluded the specified project references from the solution file."

        - task: NuGetCommand@2
          displayName: 'Restore NuGet Packages'
          inputs:
            command: 'restore'
            restoreSolution: '$(System.DefaultWorkingDirectory)/Source/Portals/**/*.sln'
            feedsToUse: 'config'
            nugetConfigPath: '$(System.DefaultWorkingDirectory)/Source/packages.config'

        - task: VSBuild@1
          displayName: 'Build Solution'
          inputs:
            solution: '$(System.DefaultWorkingDirectory)/Source/Portals/**/*.sln'
            vsVersion: '17.0'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'
            maximumCpuCount: true

        - task: VSTest@3
          displayName: 'Run unit test'
          continueOnError: true
          inputs:
            testSelector: 'testAssemblies'
            testAssemblyVer2: |
              **\*UnitTests.dll
              !**\*TestAdapter.dll
              !**\obj\**
            searchFolder: '$(System.DefaultWorkingDirectory)/Source/Portals'
            runInParallel: true
            codeCoverageEnabled: true

        - task: PublishTestResults@2
          displayName: 'Publish Test Result'
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '$(System.DefaultWorkingDirectory)/TestResults/*_TestResults.trx'
            testRunTitle: 'VS-Test'
            buildPlatform: '$(BuildPlatform)'
            buildConfiguration: '$(BuildConfiguration)'

        - task: CmdLine@2
          displayName: 'Copy API and Service Files'
          inputs:
            script: |
              mkdir "$(PublishApiPath)"
              xcopy "$(sourceApiPath)" "$(PublishApiPath)" /s /e
              mkdir "$(PublishBapiPath)"
              xcopy "$(sourceBapiPath)" "$(PublishBapiPath)" /s /e
              mkdir "$(PublishHFSPath)"
              xcopy "$(sourceHfsPath)" "$(PublishHFSPath)" /s /e
              mkdir "$(PublishKioskServicePath)"
              xcopy "$(sourceKioskServicePath)" "$(PublishKioskServicePath)" /s /e
              mkdir "$(PublishNotificationServicePath)"
              xcopy "$(sourceNotificationServicePath)" "$(PublishNotificationServicePath)" /s /e
              mkdir "$(PublishQueueServicePath)"
              xcopy "$(sourceQueueServicePath)" "$(PublishQueueServicePath)" /s /e
              mkdir "$(PublishApplicationReportPath)"
              xcopy "$(sourceReportApiPath)" "$(PublishApplicationReportPath)" /s /e
              mkdir "$(PublishPubSubPath)"
              xcopy "$(sourcePubSubPath)" "$(PublishPubSubPath)" /s /e
              mkdir "$(publishGatewayPath)"
              xcopy "$(publishSourceGateway)" "$(publishGatewayPath)" /s /e
              mkdir "$(publishConfigurationPath)"
              xcopy "$(publishSourceConfiguration)" "$(publishConfigurationPath)" /s /e
              mkdir "$(publishCrtPath)"
              xcopy "$(publishSourceCrt)" "$(publishCrtPath)" /s /e
              mkdir "$(publishKioskPath)"
              xcopy "$(publishSourceKiosk)" "$(publishKioskPath)" /s /e
              mkdir "$(publishQueueMediaPath)"
              xcopy "$(publishSourceQueueMedia)" "$(publishQueueMediaPath)" /s /e
              7z a "$(Build.ArtifactStagingDirectory)/combined.zip" "$(Build.ArtifactStagingDirectory)/combined/*"
              rmdir /s /q "$(Build.ArtifactStagingDirectory)/combined"

        - task: FileTransform@2
          displayName: 'Transform Configuration Files'
          inputs:
            folderPath: '$(Build.ArtifactStagingDirectory)/Combined.zip'
            xmlTransformationRules: 
            jsonTargetFiles: '**\**\appsettings.json'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifacts'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
