Kubernetes Ingress:

Sure! Hereâ€™s a step-by-step guide to implement Kubernetes Ingress for a simple Node.js application in Minikube:

### Step 1: Prepare the Node.js Application

1. **Create a simple Node.js application:**

Create a directory for your application and navigate to it:

```sh
mkdir node-app
cd node-app
```

2. **Initialize a new Node.js project:**

```sh
npm init -y
```

3. **Install Express:**

```sh
npm install express
```

4. **Create `index.js`:**

```javascript
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World from Node.js!');
});

app.listen(port, () => {
  console.log(`Node.js app listening at http://localhost:${port}`);
});
```

5. **Create a Dockerfile:**

```Dockerfile
# Use the official Node.js image.
FROM node:14

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
COPY package*.json ./

# Install production dependencies.
RUN npm install --only=production

# Copy local code to the container image.
COPY . .

# Run the web service on container startup.
CMD [ "node", "index.js" ]
```

### Step 2: Build and Push the Docker Image

1. **Build the Docker image:**

```sh
docker build -t node-app .
```

2. **Run Minikube with Docker support:**

```sh
minikube start
eval $(minikube -p minikube docker-env)
```

3. **Build the image inside Minikube's Docker daemon:**

```sh
docker build -t node-app .
```

### Step 3: Create Kubernetes Manifests

1. **Create a deployment YAML file (`node-app-deployment.yaml`):**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: node-app
  template:
    metadata:
      labels:
        app: node-app
    spec:
      containers:
      - name: node-app
        image: node-app:latest
        ports:
        - containerPort: 3000
```

2. **Create a service YAML file (`node-app-service.yaml`):**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: node-app
spec:
  selector:
    app: node-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: NodePort
```

3. **Create an ingress YAML file (`node-app-ingress.yaml`):**

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: node-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: node-app
            port:
              number: 80
```

### Step 4: Deploy to Kubernetes

1. **Apply the deployment and service:**

```sh
kubectl apply -f node-app-deployment.yaml
kubectl apply -f node-app-service.yaml
```

2. **Enable the Ingress addon:**

```sh
minikube addons enable ingress
```

3. **Apply the ingress resource:**

```sh
kubectl apply -f node-app-ingress.yaml
```

### Step 5: Update /etc/hosts

To access the Ingress from your local machine, you need to update your `/etc/hosts` file to map the hostname `node-app.local` to the Minikube IP address. Get the Minikube IP address with the following command:

```sh
minikube ip
```

Add the following line to your `/etc/hosts` file (you might need to use `sudo`):

```plaintext
<minikube-ip> node-app.local
```

Replace `<minikube-ip>` with the actual IP address returned by `minikube ip`.

-> Give host name as kubernetes.docker.internal in ingress.yaml.
-> Start minikube tunnel Sequentially (minikube tunnel)

### Step 6: Access the Application

Now, you should be able to access the Node.js application using the hostname defined in the Ingress resource. Open your browser and navigate to `http://node-app.local`. You should see the "Hello World from Node.js!" message.

### Summary

1. Create a simple Node.js application and Dockerize it.
2. Build and push the Docker image to Minikube.
3. Create Kubernetes manifests for deployment, service, and ingress.
4. Deploy the application to Minikube.
5. Enable Ingress and apply the Ingress resource.
6. Update your `/etc/hosts` file to point to the Minikube IP.
7. Access the application through the Ingress URL.

By following these steps, you can successfully implement Kubernetes Ingress for a simple Node.js application in Minikube.



===============================================================================================================



Sure, I can guide you through using Kubernetes Ingress with a simple Node.js application named 'useingress'. Here's a step-by-step process:

1. Create a simple Node.js application:

First, create a directory for your project:

```bash
mkdir useingress
cd useingress
```

Create a `package.json` file:

```bash
npm init -y
```

Install Express:

```bash
npm install express
```

Create an `app.js` file with this content:

```javascript
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello from useingress app!');
});

app.listen(port, () => {
  console.log(`useingress app listening at http://localhost:${port}`);
});
```

2. Dockerize the application:

Create a `Dockerfile`:

```dockerfile
FROM node:14
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD [ "node", "app.js" ]
```

Build and push the Docker image:

```bash
docker build -t your-dockerhub-username/useingress:v1 .
docker push your-dockerhub-username/useingress:v1
```

3. Create Kubernetes deployment and service:

Create a file named `useingress-deployment.yaml`:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: useingress
spec:
  replicas: 2
  selector:
    matchLabels:
      app: useingress
  template:
    metadata:
      labels:
        app: useingress
    spec:
      containers:
      - name: useingress
        image: your-dockerhub-username/useingress:v1
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: useingress-service
spec:
  selector:
    app: useingress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
```

Apply the deployment and service:

```bash
kubectl apply -f useingress-deployment.yaml
```

4. Set up Ingress:

First, ensure that you have an Ingress controller installed in your cluster. If not, you can install NGINX Ingress Controller:

```bash
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.0/deploy/static/provider/cloud/deploy.yaml
```

Create an Ingress resource file named `useingress-ingress.yaml`:

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: useingress-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: useingress.example.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: useingress-service
            port: 
              number: 80
```

Apply the Ingress resource:

```bash
kubectl apply -f useingress-ingress.yaml
```

5. Configure DNS:

Point your domain (useingress.example.com in this example) to the external IP of your Ingress controller. You can get this IP by running:

```bash
kubectl get services -n ingress-nginx
```

Look for the external IP of the `ingress-nginx-controller` service.

6. Test your setup:

Once DNS propagation is complete, you should be able to access your application at http://useingress.example.com

That's it! You now have a simple Node.js application deployed on Kubernetes with Ingress routing traffic to it. 

Would you like me to explain or break down any part of this process?